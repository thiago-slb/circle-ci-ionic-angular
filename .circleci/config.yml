version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.0
  android: circleci/android@2.1.2

jobs:
  build-debug-ios:
    working_directory: ~/repo/ios
    macos:
      xcode: 11.0.0
    steps:
      - checkout
      - run: pod install
      - run: fastlane scan
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  android-debug-build:
    working_directory: ~/repo/android
    executor:
      name: android/android-machine
      tag: 2021.10.1

    steps:
      - checkout
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-25;google_apis;x86
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
  web-test:
    working_directory: ~/repo
    docker:
      - image: 'cimg/node:16.17-browsers'
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-packages
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm run test:nowatch
  web-build:
    working_directory: ~/repo
    docker:
      - image: cimg/node:16.17.0
    steps:
      - checkout
      - run:
          name: install-ionic
          command: "sudo npm install -g @ionic/cli"
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-packages
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: build-prod
          command: ionic build --prod

workflows:
  build_and_test:
    jobs:
      - web-test
      - web-build
      - android-debug-build
      - build-debug-ios
